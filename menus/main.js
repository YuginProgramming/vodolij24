import { bot } from "../app.js";
import { keyboards, phrases } from "../language_ua.js";
import { createNewAchievement } from "../models/user_achievements.js";
import { createNewUserByChatId, findUserByChatId, updateUserByChatId } from "../models/users.js";


const mainMenu = async () => {
    bot.setMyCommands(
        [
            { command: '/start', description: '–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞' },
          ]
    );
    bot.on("callback_query", async (msg) => {

        const chatId = msg.message.chat.id;

        const callback_data = msg.data;

        if (callback_data === 'get_phone') {

            bot.sendMessage(chatId, '–û—Å—å –Ω–∞—à –Ω–æ–º–µ—Ä: +380975148884');

        };

    })

    bot.on("sticker", async (sticker) => {
        const stickerID = sticker.sticker.file_id;
        createNewAchievement(429789892, 1);
        console.log(stickerID)
    })

    bot.on('message', async (msg) => {

        const chatId = msg.chat.id; 
          
        const userInfo = await findUserByChatId(chatId);

        console.log(userInfo)
  
        let isAuthenticated;

        if (userInfo) isAuthenticated = userInfo.isAuthenticated;

        switch (msg.text) {
            
            case '/start':

                if (userInfo) await updateUserByChatId(chatId, { dialoguestatus: '' });

                if (isAuthenticated) {
                    
                    bot.sendMessage(msg.chat.id, phrases.mainMenu, {
                        reply_markup: { keyboard: keyboards.mainMenu, resize_keyboard: true, one_time_keyboard: true }
                    });

                } else {
                    
                    if (!userInfo) await createNewUserByChatId(chatId);
                    
                    await updateUserByChatId(chatId, { dialoguestatus: 'phoneNumber' });

                    bot.sendMessage(msg.chat.id, phrases.greetings, {
                      reply_markup: { keyboard: keyboards.contactRequest, resize_keyboard: true, one_time_keyboard: true }
                    });  
        
                }                
               
            break;
     
            case 'üè† –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é':                
            case '–î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é':

                await updateUserByChatId(chatId, { dialoguestatus: '' });

                if (isAuthenticated) {
                    bot.sendSticker(chatId, 'CAACAgIAAxkBAAIDKmcXrxAqFyMHGYtAw0ZUuDJpjMb-AAKmAANSiZEja7kqEI23x7w2BA');

                    bot.sendMessage(chatId, phrases.mainMenu, {
                        reply_markup: { keyboard: keyboards.mainMenu, resize_keyboard: true, one_time_keyboard: false }
                    });  
                    return;

                } else {
                    bot.sendMessage(chatId, '–í–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ', {
                        reply_markup: { keyboard: keyboards.login, resize_keyboard: true, one_time_keyboard: true }
                    });  
                }
            break;
/*
            case '–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—å':
            case '/register':

                if(userInfo) {

                    bot.sendMessage(chatId, `–í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ, –±—É–¥—å –ª–∞—Å–∫–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å`,{
                        reply_markup: { keyboard: keyboards.login, resize_keyboard: true, one_time_keyboard: true }
                    });

                } else {
                        
                    await createNewUserByChatId(chatId);
                    bot.sendMessage(msg.chat.id, phrases.contactRequest, {
                        reply_markup: { keyboard: keyboards.contactRequest, resize_keyboard: true, one_time_keyboard: true }
                    });  
                    
                }

                break;
            */
            case 'üí¨ –°–ª—É–∂–±–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏':

                bot.sendSticker(chatId, 'CAACAgIAAxkBAAIDQGcXsA9C246bIHxqWBMR0VzdEvCcAAK0AANSiZEjLSU_B-Skc_o2BA');

                bot.sendMessage(chatId, '–®–∞–Ω–æ–≤–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∏, —Å–ª—É–∂–±–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –ø—Ä–∞—Ü—é—î –∑–∞ –≥—Ä–∞—Ñ—ñ–∫–æ–º: –ü–Ω-–ü—Ç –∑ 8:00 –¥–æ 22:00, –°–±-–ù–¥ –∑ 9:00 –¥–æ 20:00', {
                    reply_markup: {
                        inline_keyboard: [
                        [{ text: '‚òéÔ∏è –ü–æ–¥–∑–≤–æ–Ω–∏—Ç–∏', callback_data: 'get_phone' }],
                        [{ text: 'üìù –ù–∞–ø–∏—Å–∞—Ç–∏ –≤ –¢–µ–ª–µ–≥—Ä–∞–º', url: 'https://t.me/vodolij_support' }]
                        ]
                    }
                });
            break;

        };

    });

};

export default mainMenu;